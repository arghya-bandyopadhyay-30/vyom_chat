# mkver.conf
# Git mkver configuration file

# Prefix for tags in git
tagPrefix: v

# Defaults are used if they are not overridden by a branch config
defaults {
  # Whether to really tag the branch when `git mkver tag` is called
  tag: false

  # Message for annotated version tags in git
  tagMessageFormat: "release {Tag}"

  # Format string for the pre-release. The format must end with {PreReleaseNumber} if it is used.
  # Examples:
  # * alpha
  # * SNAPSHOT
  # * RC{PreReleaseNumber}
  # * pre-{CommitsSinceTag}
  preReleaseFormat: "RC{PreReleaseNumber}"

  # Format string to be used for the build metadata
  buildMetaDataFormat: "{Branch}.{ShortHash}"

  # Whether to include the build metadata in the Semantic Version when next or tag are called
  includeBuildMetaData: true

  # Action to take, if after analyzing all commit messages since the last tag
  # no increment instructions can be found.
  # Options:
  # * Fail - application will exit
  # * IncrementMajor - bump the major version
  # * IncrementMinor - bump the minor version
  # * IncrementPatch - bump the patch version
  # * NoIncrement - no version change will occur
 whenNoValidCommitMessages: IncrementPatch

}

# Branch-specific overrides of the default config
branches: [
  {
    pattern: ".*"
    tag: true
    includeBuildMetaData: false
  }
]

# commitMessageActions configure how different commit messages will increment the version number
commitMessageActions: [
  # Breaking changes (major)
  {
    pattern: "BREAKING CHANGE"
    action: IncrementMajor
  }
  {
    pattern: "major(\\(.+\\))?!:"
    action: IncrementMajor
  }
  {
    pattern: "minor(\\(.+\\))?!:"
    action: IncrementMajor
  }
  {
    pattern: "patch(\\(.+\\))?!:"
    action: IncrementMajor
  }
  {
    pattern: "feature(\\(.+\\))?!:"
    action: IncrementMajor
  }
  {
    pattern: "feat(\\(.+\\))?!:"
    action: IncrementMajor
  }
  {
    pattern: "fix(\\(.+\\))?!:"
    action: IncrementMajor
  }
  # The rest of the conventional commits
  {
    pattern: "(build|ci|chore|docs|perf|refactor|revert|style|test)(\\(.+\\))?!:"
    action: IncrementMajor
  }
  {
    pattern: "major(\\(.+\\))?:"
    action: IncrementMajor
  }
  {
    pattern: "minor(\\(.+\\))?:"
    action: IncrementMinor
  }
  {
    pattern: "patch(\\(.+\\))?:"
    action: IncrementPatch
  }
  {
    pattern: "feature(\\(.+\\))?:"
    action: IncrementMinor
  }
  {
    pattern: "feat(\\(.+\\))?:"
    action: IncrementMinor
  }
  {
    pattern: "fix(\\(.+\\))?:"
    action: IncrementPatch
  }
  # The rest of the conventional commits
  {
    pattern: "(build|ci|chore|docs|perf|refactor|revert|style|test)(\\(.+\\))?:"
    action: NoIncrement
  }
]
